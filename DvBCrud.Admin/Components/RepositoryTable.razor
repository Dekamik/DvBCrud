@using DvBCrud.Shared
@using DvBCrud.Shared.Entities
@using System.Reflection
@using DvBCrud.Shared.Permissions
@using System.ComponentModel.DataAnnotations
@using DvBCrud.Admin.Internal

@typeparam TId
@typeparam TCrudModel where TCrudModel : IEntity<TId>
@typeparam TRepository where TRepository : IRepository<TId, TCrudModel>

@inject TRepository Repository

<h1>@Name</h1>

@if (_items == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
        @foreach (var info in _properties)
        {
            @if (info.GetAttribute<DisplayAttribute>()?.GetAutoGenerateField() ?? true)
            {
                <th>
                    @(info.GetAttribute<DisplayAttribute>() != null 
                        ? info.GetAttribute<DisplayAttribute>()?.Name ?? info.Name
                        : info.Name)
                </th>
            }
        }
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _items)
        {
            <tr id="@item.Id">
            @foreach (var info in _properties)
            {
                @if (info.GetAttribute<DisplayAttribute>()?.GetAutoGenerateField() ?? true)
                {
                    <td>@info.GetValue(item)</td>
                }
            }
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Name { get; set; } = null!;

    [Parameter]
    public CrudActions Permissions { get; set; } = CrudActions.All;

    private PropertyInfo[] _properties = null!;
    private IList<TCrudModel>? _items;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _properties = typeof(TCrudModel).GetProperties()
            .OrderBy(p => p.GetAttribute<DisplayAttribute>()?.GetOrder())
            .ToArray();
        _items = Repository.List()
            .ToList();
    }
}
