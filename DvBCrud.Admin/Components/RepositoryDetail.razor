@using DvBCrud.Shared
@using DvBCrud.Shared.Entities
@using System.Reflection
@using DvBCrud.Admin.Internal
@using System.ComponentModel.DataAnnotations

@typeparam TId
@typeparam TCrudModel where TCrudModel : IEntity<TId>
@typeparam TRepository where TRepository : IRepository<TId, TCrudModel>

@inject TRepository Repository

<h1>@Name</h1>

@if (Item == null)
{
    <p>
        <em>@(typeof(TCrudModel).Name)[@Id] not found</em>
    </p>
}
else
{
    @foreach (var prop in _properties)
    {
        @if (prop.GetAttribute<DisplayAttribute>()?.GetAutoGenerateField() ?? true)
        {
            <label class="fw-bold" for="@prop.Name">@prop.GetDisplayName()</label>
            <p id="@prop.Name">
                @prop.GetValue(Item)
            </p>
        }
    }
}

@code {
    [Parameter]
    public TId? Id { get; set; }
    
    [Parameter]
    public TCrudModel? Item { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private PropertyInfo[] _properties = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _properties = MemberInfoHelpers.GetPropertyInfos<TCrudModel>();
        Item ??= Repository.Get(Id ?? throw new ArgumentNullException(nameof(Id)));
    }
}