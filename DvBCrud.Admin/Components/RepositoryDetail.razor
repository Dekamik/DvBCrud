@using DvBCrud.Shared
@using DvBCrud.Shared.Entities
@using System.Reflection
@using DvBCrud.Admin.Internal
@using DvBCrud.Admin.Internal.Components
@using System.ComponentModel.DataAnnotations
@using DvBCrud.Admin.Internal.Wrappers
@using Microsoft.AspNetCore.Components.Forms

@typeparam TId
@typeparam TCrudModel where TCrudModel : IEntity<TId>
@typeparam TRepository where TRepository : IRepository<TId, TCrudModel>

@inject TRepository Repository

<h1>@Name</h1>

@if (Item == null)
{
    <p>
        <em>@(typeof(TCrudModel).Name)[@Id] not found</em>
    </p>
}
else
{
    <div class="col">
        <div class="row text-end">
            <div>
                <div class="btn-group">
                    @if (!_editMode)
                    {
                        <button class="btn btn-primary" onclick="@ToggleEditMode">Edit</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit" onclick="@HandleSave">Save</button>
                        <button class="btn btn-outline-danger" onclick="@ToggleEditMode">Cancel</button>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-8">
        @if (_editMode)
        {
            <RepositoryDetailEdit PropertyVars="_propertyVars" TCrudModel="TCrudModel" />
        }
        else
        {
            <RepositoryDetailView Item="Item" TItem="TCrudModel" />
        }
    </div>
}

@code {
    [Parameter]
    public TId Id { get; set; } = default!;

    [Parameter]
    public TCrudModel? Item { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private PropertyInfo[] _properties = null!;
    
    private bool _editMode = false;
    private Dictionary<string, Wrapper<dynamic>> _propertyVars = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _properties = MemberInfoHelpers.GetPropertyInfos<TCrudModel>();
        RefreshProperties();
        Item ??= Repository.Get(Id ?? throw new ArgumentNullException(nameof(Id)));
    }

    private void ToggleEditMode()
    {
        _editMode = !_editMode;
        StateHasChanged();
    }

    private void HandleSave()
    {
        Item.FromPropertyWrappers(_propertyVars);
        Repository.Update(Id, Item ?? throw new InvalidOperationException());
        ToggleEditMode();
    }

    private void HandleCancel()
    {
        RefreshProperties();
        ToggleEditMode();
    }

    private void RefreshProperties()
    {
        _propertyVars = Item.ToPropertyWrappers();
    }
}